

/*

If alpha = 0.5, then the RC time constant equals to the sampling period. If alpha << 0.5, then RC is significantly smaller than the sampling interval and RC approx= alpha * T_sampl


*/

//#include <DistanceGP2Y0A21YK.h>
 
//DistanceGP2Y0A21YK Dist;

uint8_t openPin = 7;
uint8_t ledPin = 13;

typedef struct event
{
  uint16_t timeout = 0;
  uint32_t lastTimeEvent = 0;
  char lastDetected = 0;
  uint16_t cnt = 0;
};

event readSensor, activation;

typedef struct filter
{
  float alpha = 0.5;
  uint16_t prevOutVal = 0;
  uint16_t prevInVal = 0;
};

filter HPF;

uint8_t TH = 5;

void setup()
{
  pinMode(openPin, OUTPUT);
  digitalWrite(openPin, LOW);

  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);
  
  Serial.begin(115200);
//  Dist.begin(0);
  
  readSensor.timeout = 10;
  readSensor.lastTimeEvent = millis();
  
  activation.lastTimeEvent = millis();
  activation.timeout = 3000;
  
  HPF.alpha = 0.95;//0.38;
}

void loop()
{
  if (Serial.available())
    if (Serial.read() == '1') openDoor();
  
  
  if (millis() - readSensor.lastTimeEvent > readSensor.timeout)
  {
    uint16_t val = (analogRead(0)<<2);
    
    // DC offset removal: Y_i = 0.996 * (Y_i + X_i - X_i-1)
    if (val < HPF.prevInVal) HPF.prevInVal = val;
    uint32_t tmpVal = HPF.prevOutVal + val - HPF.prevInVal;
    HPF.prevOutVal = ( (tmpVal<<8) -(tmpVal<<7) )>>8; // integer implementation of float coefficient
    HPF.prevInVal = val; // record the new input value
    
//    printAsteriscs(HPF.prevOutVal);
    Serial.println(HPF.prevOutVal);
    Serial.print("       ");  Serial.println(val);
       
    readSensor.lastTimeEvent = millis();
    
    if (HPF.prevOutVal > TH &&  millis() - activation.lastTimeEvent > activation.timeout)
    {
//      openDoor();
      activation.lastTimeEvent = millis();
    }
    
  }
}

void openDoor()
{
  digitalWrite(openPin, HIGH);
  digitalWrite(ledPin, HIGH);
  delay(50);
  digitalWrite(openPin, LOW);
  digitalWrite(ledPin, LOW);
}




void printAsteriscs(uint16_t val)
{
  uint16_t maxVal = 1023;
  uint8_t numOfdots = 1;
//  val = maxVal - val; // complementary value
  while(val > 1)
  {
    val /= 1.4;
    numOfdots++;
  }
  for(uint8_t i = 0; i < numOfdots; i++) Serial.print('*');
  Serial.println();
}






/*

#include <DistanceGP2Y0A21YK.h>
 
DistanceGP2Y0A21YK Dist;
 

const uint8_t TH = 35; // 25 cm range
uint8_t THflag = 0;


const uint8_t buzzPin = 7;

uint16_t timeOut = 4000; // 4 sec timeout
uint32_t lastTime = 0;

 
void setup()
{
  Serial.begin(115200);
  Dist.begin(0);
  pinMode(buzzPin, OUTPUT);
}
 
void loop()
{ 
  
  if (Dist.isCloser(TH))
  {
    if (!THflag && millis() - lastTime > timeOut)
    {
      Serial.println("OK");
      THflag = 1;
      beep();
      lastTime = millis();
    }
  }
  else THflag = 0;
  
//  Serial.println(Dist.getDistanceRaw());
  delay(10);
}

void beep()
{
  digitalWrite(buzzPin, HIGH);
  delay(50);
  digitalWrite(buzzPin, LOW);
}

*/
